// controllers/profilesController.js
const {
  addProfile,
  getAllProfiles,
  getProfileByDisplayName,
  updateProfileByDisplayName,
  deleteProfileByDisplayName,
  getDeletedProfiles,
  restoreProfile
} = require("../services/xmlProfileService"); // <-- ton fichier avec les m√©thodes xml2js

class ProfilesController {
  // üîπ R√©cup√®re la liste des profils
  async getProfiles(req, res) {
    try {
      const profiles = await getAllProfiles();
      const profileNames = profiles.map(p => p?.DisplayName?.[0]);
      res.json({ success: true, profiles: profileNames });
    } catch (error) {
      console.error("Erreur r√©cup√©ration profils:", error);
      res.status(500).json({ success: false, error: error.message });
    }
  }

  // üîπ R√©cup√®re un profil sp√©cifique
  async getProfile(req, res) {
    try {
      const profile = await getProfileByDisplayName(req.params.name);
      if (!profile) {
        return res.status(404).json({ success: false, error: "Profil non trouv√©" });
      }
      res.json({ success: true, profile });
    } catch (error) {
      console.error("Erreur r√©cup√©ration profil:", error);
      res.status(500).json({ success: false, error: error.message });
    }
  }

  // üîπ Cr√©e un nouveau profil
  async createProfile(req, res) {
    try {
      const profile = await addProfile(req.body);
      res.json({ success: true, message: "Profil cr√©√© avec succ√®s", profile });
    } catch (error) {
      console.error("Erreur cr√©ation profil:", error);
      res.status(400).json({ success: false, error: error.message });
    }
  }

  // üîπ Met √† jour un profil
  async updateProfile(req, res) {
    try {
      await updateProfileByDisplayName(req.params.name, req.body);
      res.json({ success: true, message: "Profil mis √† jour avec succ√®s" });
    } catch (error) {
      console.error("Erreur mise √† jour profil:", error);
      res.status(400).json({ success: false, error: error.message });
    }
  }

  // üîπ Supprime un profil
  async deleteProfile(req, res) {
    try {
      await deleteProfileByDisplayName(req.params.name);
      res.json({ success: true, message: "Profil supprim√© avec succ√®s" });
    } catch (error) {
      console.error("Erreur suppression profil:", error);
      res.status(400).json({ success: false, error: error.message });
    }
  }

  // üîπ Liste des profils supprim√©s (backup)
  async getDeleted(req, res) {
    try {
      const deleted = getDeletedProfiles();
      res.json({ success: true, deleted });
    } catch (error) {
      res.status(500).json({ success: false, error: error.message });
    }
  }

  // üîπ Restaurer un profil supprim√©
  async restore(req, res) {
    try {
      const restoredName = await restoreProfile(req.params.file);
      res.json({ success: true, message: `Profil "${restoredName}" restaur√© avec succ√®s` });
    } catch (error) {
      res.status(400).json({ success: false, error: error.message });
    }
  }
}

module.exports = new ProfilesController();
